test.h

#pragma once
#ifndef TEST_H_
#define TEST_H_

class vehicle  //汽车类
{
protected:
	int wheels, weight;
public:
	vehicle(int whe, int wei);
	~vehicle();
	void Output(); //vehicle类输出
};

class car : private vehicle //私有继承
{
private:
	int passenger_load;
public:
	car(int whe, int wei, int pas);
	~car();
	void Output(); //car类输出
};

class truck : private vehicle //私有继承
{
public:
	truck(int whe, int wei, int pas, int pay);
	~truck();
	void Output();
private:
	int passenger_load, payload;
};


#endif // !TEST_H_


fun.c

#include<iostream>
#include"test.h"
using namespace std;

 vehicle::vehicle(int whe, int wei) //含参构造函数
{
	 wheels = whe;
	 weight = wei;
	 //cout << "构造函数已调用。" << endl;
}

 vehicle ::~vehicle() //析构函数
 {
	 cout << "析构函数已调用" << endl;
 }

 void vehicle::Output() //输出函数
 {
	 cout << "汽车的轮子为：" << wheels << "个" << endl;
	 cout << "汽车的重量是：" << weight << "kg" << endl;
 }

 car::car(int whe,int wei,int pas):vehicle(whe,wei),passenger_load(pas){}

 car::~car()
 {
	 cout << "析构函数已调用" << endl;
 }

 void car::Output()
 {
	 vehicle::Output();
	 cout << "核载人数是：" << passenger_load << "人" << endl;
 }

truck::truck(int whe,int wei,int pas,int pay):vehicle(whe,wei),passenger_load(pas),payload(pay){}

truck::~truck()
{
	cout << "析构函数已调用" << endl;
}

void truck::Output()
{
	vehicle::Output();
	cout << "核载人数是：" << passenger_load << "人" << endl;
	cout << "核载重量是：" << payload << "kg" << endl;
}


test.c

#include<iostream>
#include"test.h"
using namespace std;

int main()
{
	vehicle v(4, 2000);
	car v1(2, 500,2);
	truck v2(4,4000,2,300);
	cout << "vehicle:" << endl;
	v.Output();
	cout << endl << "car:" << endl;
	v1.Output();
	cout << endl << "truck:" << endl;
	v2.Output();

	system("pause");
    return 0;
}


